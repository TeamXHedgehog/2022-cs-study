### 주제
Q. 서버에서 FIn을 전송하기전 전송한 패킷이 패킷유실로인한 재전송으로 인해 FIN패킷보다 늦게도착하면?
  A. Client에서 세션을 종료시킨 후 늦게 도착하는 패킷은 drop되고 데이터는 유실된다. 
    이런 상황에 대비하여 Client는 Server로부터 FIN을 수신하고 일정시간(default 240sec)동안 세션을 남겨두고 잉여 패킷을 기다린다. (TIME_WAIT 과정)


동작과정 이해하기위해 알고있어야 하는 자료
### TCP , UDP란
## TCP(Transmission Control Protocol)란?
- 인터넷상에서 데이터를 메세지의 형태(세그먼트 단위)로 보내기 위해 IP와 함께 사용하는 프로토콜이다.
- TCP는 애플리케이션에게 신뢰적이고 연결지향성인 서비스를 제공한다.
- TCP는 일반적으로 IP와 함께 사용되며, IP는 배달을, TCP는 패킷의 추적 및 관리를 한다

# 특징
- **3 Way Handshaking**으로 연결을 설정, **4 Way Handshaking**으로 연결을 해제한다.
- 흐름 제어: 데이터를 송신하는 곳과 수신하는 곳의 데이터 러시 속도를 조절하여 수신자의 버퍼 Overflow를 방지한다.
- 혼잡 제어: 네트워크 내의 패킷 수가 넘치게 증가하지 않도록 방지한다.

# 플래그 정보
TCP 헤더에는 플래그 비트(컨트롤 비트)가 존재한다. 각 비트는 `URG`-`ACK`-`PSH`-`RST`-`SYN`-`FIN`의 의미를 가진다.
- `SYN`(Synchronize Sequence Number): `000010`. 연결 설정.
- `ACK`(Acknowledgement): `010000`. 응답 확인.
- `FIN`(Finish): `000001`. 연결 해제.

# 연결 해제 종류
- **Graceful connection release**: 정상적인 연결 해제. 양쪽 커넥션이 서로 모두 커넥션을 닫을 때까지 연결되어 있음.
- **Abrupt connection release**: 갑작스런 연결 해제. 갑자기 한 TCP 엔티티가 연결을 강제로 닫거나 한 사용자가 두 데이터 전송 방향을 모두 닫을 때 발생.

## UDP(User Datagram Protocol)란?
- 데이터를 데이터그램(독립적인 관계를 지니는 패킷) 단위로 처리하는 프로토콜이다.

# 특징
- **비연결형 프로토콜**이다. 데이터를 서로 다른 경로로 독립적으로 처리한다.
- 연결을 성정하고 해제하는 과정이 존재하지 않는다.
- 재조립, 흐름제어 및 혼잡제어 과정이 없어 속도가 빠르고 네트워크 부하가 적다.


### 3 Way Handshake & 4 Way Handshake
- 3 Way Handshake는 TCP 통신을 이용하여 데이터를 전송하기 위해 네트워크 연결을 설정 (Connection Establish)하는 과정이다.
- 4 Way Handshake는 연결을 해제하기 위해 사용한다. (세션을 종료하기 위해 수행되는 과정)

### 4 Way Handshake 동작과정 
- Step1: Client가 Server에 연결을 종료하겠다는 FIN 패킷을 전송한다. 이 FIN 패킷에는 실질적으로 ACK가 포함되어 있는데, 이는 **Half-Close 기법**을 사용하기 때문이다.
          > ** Half-Close 기법 **
           1. 연결을 종료하기 전에 완전히 종료하지 않고 반만 종료.
           2. 수신자가 남은 데이터를 모두 보내고 나면 다시 요청자에게 FIN 패킷을 보냄으로써 모든 데이터가 처리되었다는 신호를 보냄(3번 과정).
           3. 요청자는 나머지 반을 닫아 좀 더 안전하게 연결이 종료됨.
- Step2: Server는 Client에 확인 메시지(*ACK)를 보내고 자신의 통신이 끝나기를 기다린다. 이 상태가 TIME_WAIT 상태이다. 
          서버에서는 FIN 패킷을 정상적으로 받았다는 ACK를 클라이언트에 전송해준다. 그 후 서버는 CLOSE-WAIT 상태로 빠져든다.
- Step3: 통신이 끝나면 Server는 연결이 종료되었다고 Client에 FIN 패킷을 전송한다.이때 아직 Server로부터 받지 못한 데이터가 있을 수 있으므로 Client는 `TIME_WAIT` 상태로 기다린다.
          - `Time_WAIT` 상태로 인해 Client는 Server로 부터 FIN 플래그를 수신하더라도 잉여 패킷을 기다린다(Default는 240sec). 이를 통해 Client에서 세션을 종료시킨 후 뒤늦게 도착하는 패킷이 유실되는 문제를 방지한다.
          - FIN을 전송하기 전 패킷이 라우팅 지연이나 패킷 유실로 인한 재전송 등으로 인해 FIN 패킷보다 늦게 도착하는 상황이발생한다면 클라이언트는 세션을 종료시킨 후 뒤늦게 도착한 패킷이 있다면 이 패킷을 Drop하고 데이터는 유실될텐데 이러한현상을 대비한 과정이 TIME_WAIT 이다.
          - 연결을 종료한 후 서버는 클라이언트에게 FIN Flag를 전송해준다.       
- Step4: 클라이언트는 확인했다는 메시지를 보낸다.

### 추가 설명
**연결 종료를 3-way Handshake 대신 4-way Handshake로 왜 해야하나?**
- 클라이언트가 데이터 전송을 마쳤다고 하더라도 서버는 아직 보낼 데이터가 남아있을 수 있기 때문에 일단 FIN에 대한 ACK만 먼저 보내고, 데이터를 모두 전송한 후에 자신도 FIN 메시지를 보내기 때문이다.

**TIME-WAIT는 왜?**
- 여기서 클라이언트가 서버로부터 FIN을 수신하더라도 일정시간 세션을 유지하는 이유는, 서버에서 FIN을 전송하기 전에 클라이언트가 전송한 패킷이 라우팅 지연이나 패킷 유실로 인한 재전송 등으로 인해 해당 ACK 패킷이 FIN 패킷보다 늦게 도착하는 상황을 대비해야하기 때문이다.
- 클라이언트에서 세션을 종료시킨 후 뒤늦게 도착하는 패킷이 있다면 이 패킷은 드롭되고 데이터는 유실될 것이다. 이러한 현상에 대비하여 클라이언트는 서버로부터 FIN을 수신하더라도 일정시간(default 240) 동안 세션을 남겨놓고 잉여 패킷을 기다리는 과정을 거치게 되는데, 이 과정을 TIME_WAIT이다.

**TCP Flag란?**
- Flag란 무엇인가를 기억해야 하거나 또는 다른 프로그램에게 약속된 신호를 남기기 위한 용도로 프로그램에서 사용되는 미리 정의된 비트를 의미합니다.
  이러한 Control Flag에 대한 필드들이 TCP 헤더에 6개가 존재하며 각각 1비트로 필드 내에 정의되어 있습니다.
  이들을 이용하여 논리적인 TCP 연결회선 제어 및 데이터 관리를 하게 됩니다.
  
**TCP Flag 종류**
SYN (Synchronize) 연결 요청 플래그
- TCP에서 세션을 성립할 때 가장 먼저 보내는 패킷입니다. 시퀀스 번호를 임의로 설정하여 세션을 연결하는데 사용되며 초기에 시퀀스 번호를 보내게 됩니다.

ACK (Acknowledgement) 응답 플래그
- 상대방으로부터 패킷을 받았다는 것을 알려주는 패킷으로, 다른 Flag와 같이 출력되는 경우도 있습니다. 송신 측에서 수신 측 시퀀스 번호에 TCP 계층에서 길이 또는 데이터 양을 더한 것과 같은 ACK를 보냅니다. (일반적으로 +1을 하여 보냅니다) ACK 응답을 통해 보낸 패킷에 대한 성공, 실패를 판단하여 재전송 하거나 다음 패킷을 전송합니다.

FIN (Finish) 연결 종료 플래그
- 세션 연결을 종료시킬 때 사용되며, 더이상 전송할 데이터가 없음을 나타냅니다.

RST (Reset) 연결 재설정 플래그
- 재설정(Reset)을 하는 과정이며 양방향에서 동시에 일어나는 중단 작업입니다. 비정상적인 세션 연결 끊기에 해당합니다. 이 패킷을 보내는 곳이 현재 접속하고 있는 곳과 즉시 연결을 끊고자 할 때 사용합니다.

PSH (Push) 넣기 플래그
- 버퍼가 채워지기를 기다리지 않고 데이터를 받는 즉시 전달하는 Flag 입니다. 데이터는 버퍼링 없이 OSI 7 Layer Application Layer의 응용프로그램으로 바로 전달합니다.

URG (Urgent) 긴급 데이터 플래그
- 긴급한 데이터의 우선순위를 다른 데이터의 우선순위보다 높여 긴급하게 데이터를 전달하는 Flag 입니다.
